name: Auto Release

on:
  push:
    branches: [main]

permissions:
  contents: write
  packages: write

jobs:
  tag-and-release:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Fetch tags
        shell: bash
        run: git fetch --force --tags --quiet || true

      - name: Compute next patch version
        id: semver
        shell: bash
        run: |
          set -euo pipefail
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v1.0.0")
          echo "last=$LAST_TAG" >> "$GITHUB_OUTPUT"
          VER=${LAST_TAG#v}
          IFS='.' read -r MAJOR MINOR PATCH <<< "$VER"
          if [[ -z "${MAJOR:-}" || -z "${MINOR:-}" || -z "${PATCH:-}" ]]; then
            echo "Invalid last tag format: $LAST_TAG" >&2
            exit 1
          fi
          NEXT_PATCH=$((PATCH + 1))
          NEXT_VERSION="$MAJOR.$MINOR.$NEXT_PATCH"
          echo "next=$NEXT_VERSION" >> "$GITHUB_OUTPUT"

      - name: Check if next tag already exists
        id: check
        shell: bash
        run: |
          set -euo pipefail
          NEXT="v${{ steps.semver.outputs.next }}"
          git fetch --tags --quiet || true
          if git rev-parse -q --verify "refs/tags/$NEXT" >/dev/null || git ls-remote --exit-code --tags origin "$NEXT" >/dev/null; then
            echo "exists=true" >> "$GITHUB_OUTPUT"
            echo "Tag $NEXT already exists. Skipping."
          else
            echo "exists=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Update files
        if: steps.check.outputs.exists != 'true'
        shell: bash
        run: |
          set -euo pipefail
          NEXT="${{ steps.semver.outputs.next }}"
          LAST="${{ steps.semver.outputs.last }}"
          echo "$NEXT" > VERSION

          if git rev-parse -q --verify "refs/tags/$LAST" >/dev/null; then
            RANGE="$LAST..HEAD"
          else
            RANGE="$(git rev-list --max-parents=0 HEAD)..HEAD"
          fi

          CHANGELOG_TEMP=$(mktemp)
          echo "## v$NEXT" > "$CHANGELOG_TEMP"
          LOG=$(git log ${RANGE} --pretty=format:'* %s' || true)
          if [[ -z "$LOG" ]]; then LOG="* Internal maintenance"; fi
          echo "$LOG" >> "$CHANGELOG_TEMP"
          echo >> "$CHANGELOG_TEMP"

          if [[ -f CHANGELOG.md ]]; then
            cat CHANGELOG.md >> "$CHANGELOG_TEMP"
          fi
          mv "$CHANGELOG_TEMP" CHANGELOG.md

      - name: Commit changes
        if: steps.check.outputs.exists != 'true'
        uses: EndBug/add-and-commit@v9
        with:
          add: "VERSION CHANGELOG.md"
          message: "chore(release): v${{ steps.semver.outputs.next }}"
          default_author: github_actions

      - name: Create Git tag
        if: steps.check.outputs.exists != 'true'
        shell: bash
        run: |
          set -euo pipefail
          TAG="v${{ steps.semver.outputs.next }}"
          git tag -a "$TAG" -m "Release $TAG"
          git push origin "$TAG"

      - name: Create GitHub release
        if: steps.check.outputs.exists != 'true'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: "v${{ steps.semver.outputs.next }}"
          body_path: CHANGELOG.md
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
